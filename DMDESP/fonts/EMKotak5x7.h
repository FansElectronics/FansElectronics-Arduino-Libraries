/*
 *
 * EMKotak5x7
 * elektronmart.com
 *
 *
 * File Name           : EMKotak5x7.h
 * Date Created        : 3 Juli 2020
 * Date Updated        : 6 Juli 2020
 * Font width          : 5
 * Font height         : 7
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#ifdef __AVR__
#include <avr/pgmspace.h>
#elif defined (ESP8266)
#include <pgmspace.h>
#else
#define PROGMEM
#endif

#ifndef EMKOTAK5X7_H
#define EMKOTAK5X7_H

#define EMKOTAK5X7_WIDTH 5
#define EMKOTAK5X7_HEIGHT 7

/*
 * added to allow fontname to match header file name. 
 * as well as keep the old name for backward compability
 */

#define EMKotak5x7 EMKotak5x7

const static uint8_t EMKotak5x7[] PROGMEM = {

    0x07, //8, // size 
    0x23, //35, // size of zero indicates fixed width font, actual length is width * height
    0x05, // width
    0x07, // height
    0x20, // first char
    0x60, // char count
    
    // font mapping
    
    0x05,0x1,0x03,0x05,0x05,0x05,0x05,0x01,0x03,0x03, // spasi  !	"	#	$	%	&	'	(	)
	0x05,0x05,0x02,0x05,0x02,0x05, // *	+   ,	-	.	/	

    0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05, // 0	1	2	3 	4	5	6	7	8	9

	0x02,0x02,0x05,0x05,0x05,0x05,0x05, // :	;	<	=	>	?	@

	0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x01,0x05, // A	B	C	D	E	F	G	H	I	J
	0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05, // K	L	M	N	O	P	Q	R	S	T
	0x05,0x05,0x05,0x05,0x05,0x05,	// U	V	W	X	Y	Z

	0x03,0x05,0x03,0x05,0x05,0x02, //	[	\	]	^	_	`

	0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x01,0x04,  // a	b	c	d	e	f	g	h	i	j
	0x05,0x01,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x04,  // k	l	m	n	o	p	q	r	s	t
	0x05,0x05,0x05,0x05,0x05,0x05, //	u	v	w	x	y	z

	0x03,0x01,0x03,0x05,0x05, //	{	|	}	->	<-
    
    
    
    // font data
    0x00, 0x00, 0x00, 0x00, 0x00, // 32 SPASI
    0x5F, // 33 !
    0x07, 0x00, 0x07, // 34 "
    0x14, 0x7F, 0x14, 0x7F, 0x14, // 35 #
    0x2e, 0x2a, 0x6b, 0x2a, 0x3a, // 36 $
    0x63, 0x13, 0x08, 0x64, 0x63, // 37 %
    0x7f, 0x45, 0x45, 0x41, 0x70, // 38 &
    0x07, // 39 '
    0x1C, 0x22, 0x41, // 40 (
    0x41, 0x22, 0x1C, // 41 )
    0x14, 0x08, 0x3E, 0x08, 0x14, // 42 *
    0x08, 0x08, 0x3E, 0x08, 0x08, // 43 +
    0x30, 0x70, // 44 ,
    0x08, 0x08, 0x08, 0x08, 0x08, // 45 -
    0x60, 0x60, // 46 .
    0x60, 0x10, 0x08, 0x04, 0x03, // 47 /

    0x7f, 0x41, 0x41, 0x41, 0x7f, // 48 0
    0x00, 0x00, 0x7f, 0x00, 0x00, // 49 1
    0x79, 0x49, 0x49, 0x49, 0x4f, // 50 2
    0x49, 0x49, 0x49, 0x49, 0x7f, // 51 3
    0x1f, 0x10, 0x10, 0x10, 0x7f, // 52 4
    0x4f, 0x49, 0x49, 0x49, 0x79, // 53 5
    0x7f, 0x49, 0x49, 0x49, 0x79, // 54 6
    0x01, 0x01, 0x01, 0x01, 0x7f, // 55 7
    0x7f, 0x49, 0x49, 0x49, 0x7f, // 56 8
    0x4f, 0x49, 0x49, 0x49, 0x7f, // 57 9

    0x36, 0x36, // 58 :
    0x36, 0x76, // 59 ;
    0x08, 0x14, 0x22, 0x41, 0x00, // 60 <
    0x14, 0x14, 0x14, 0x14, 0x14, // 61 =
    0x00, 0x41, 0x22, 0x14, 0x08, // 62 >
    0x03, 0x01, 0x59, 0x09, 0x0f, // 63 ?
    0x7f, 0x41, 0x5d, 0x55, 0x7d, // 64 @

    0x7f, 0x09, 0x09, 0x09, 0x7f, // 65 A
    0x7f, 0x49, 0x49, 0x49, 0x77, // 66 B
    0x7f, 0x41, 0x41, 0x41, 0x41, // 67 C
    0x7f, 0x41, 0x41, 0x41, 0x3e, // 68 D
    0x7f, 0x49, 0x49, 0x49, 0x49, // 69 E
    0x7f, 0x09, 0x09, 0x09, 0x09, // 70 F
    0x7f, 0x41, 0x49, 0x49, 0x79, // 71 G
    0x7f, 0x08, 0x08, 0x08, 0x7f, // 72 H
    0x7f, // 73 I
    0x60, 0x40, 0x40, 0x40, 0x7f, // 74 J
    0x7f, 0x08, 0x08, 0x08, 0x77, // 75 K
    0x7f, 0x40, 0x40, 0x40, 0x40, // 76 L
    0x7f, 0x01, 0x06, 0x01, 0x7f, // 77 M
    0x7f, 0x01, 0x02, 0x04, 0x7f, // 78 N
    0x7f, 0x41, 0x41, 0x41, 0x7f, // 79 O
    0x7f, 0x09, 0x09, 0x09, 0x0f, // 80 P
    0x7f, 0x41, 0x51, 0x21, 0x5f, // 81 Q
    0x7f, 0x09, 0x09, 0x09, 0x77, // 82 R
    0x4f, 0x49, 0x49, 0x49, 0x79, // 83 S
    0x01, 0x01, 0x7f, 0x01, 0x01, // 84 T
    0x7f, 0x40, 0x40, 0x40, 0x7f, // 85 U
    0x1f, 0x20, 0x40, 0x20, 0x1f, // 86 V
    0x7f, 0x40, 0x30, 0x40, 0x7f, // 87 W
    0x77, 0x14, 0x08, 0x14, 0x77, // 88 X
    0x0f, 0x08, 0x78, 0x08, 0x0f, // 89 Y
    0x61, 0x51, 0x49, 0x45, 0x43, // 90 Z

    0x7F, 0x41, 0x41, // 91 [
    0x03, 0x04, 0x08, 0x10, 0x60, // 92 \/
    0x41, 0x41, 0x7f, // 93 ]
    0x04, 0x02, 0x01, 0x02, 0x04, // 94 ^
    0x40, 0x40, 0x40, 0x40, 0x40, // 95 _
    0x03, 0x07, // 96 '

    0x74, 0x54, 0x54, 0x54, 0x7c, // 97 a
    0x7f, 0x44, 0x44, 0x44, 0x7c, // 98 b
    0x7c, 0x44, 0x44, 0x44, 0x44, // 99 c
    0x7c, 0x44, 0x44, 0x44, 0x7f, // 100 d
    0x7c, 0x54, 0x54, 0x54, 0x5c, // 101 e
    0x7e, 0x09, 0x09, 0x09, 0x01, // 102 f
    0x5e, 0x52, 0x52, 0x52, 0x7e, // 103 g
    0x7f, 0x04, 0x04, 0x04, 0x7c, // 104 h
    0x7d, // 105 i
    0x40, 0x40, 0x40, 0x7d, // 106 j
    0x7f, 0x10, 0x10, 0x10, 0x6c, // 107 k
    0x7f, // 108 l
    0x7c, 0x04, 0x08, 0x04, 0x7c, // 109 m
    0x7c, 0x04, 0x04, 0x04, 0x7c, // 110 n
    0x7c, 0x44, 0x44, 0x44, 0x7c, // 111 o
    0x7c, 0x14, 0x14, 0x14, 0x1c, // 112 p
    0x1c, 0x14, 0x14, 0x14, 0x7c, // 113 q
    0x7c, 0x04, 0x04, 0x04, 0x04, // 114 r
    0x5c, 0x54, 0x54, 0x54, 0x74, // 115 s
    0x7f, 0x44, 0x44, 0x40, // 116 t
    0x7c, 0x40, 0x40, 0x40, 0x7c, // 117 u
    0x1c, 0x20, 0x40, 0x20, 0x1c, // 118 v
    0x7c, 0x40, 0x20, 0x40, 0x7c, // 119 w
    0x44, 0x28, 0x10, 0x28, 0x44, // 120 x
    0x5c, 0x50, 0x50, 0x50, 0x7c, // 121 y
    0x44, 0x64, 0x54, 0x4C, 0x44, // 122 z

    0x08, 0x77, 0x41, // 123 {
    0x7f, // 124 |
    0x41, 0x77, 0x08, // 125 }
    0x08, 0x04, 0x08, 0x10, 0x08, // 126 ->
    0x00, 0x00, 0x00, 0x00, 0x00 // 127 <-
    
};

#endif
